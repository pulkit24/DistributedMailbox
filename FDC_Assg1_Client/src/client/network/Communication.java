package client.network;

import java.util.List;

import server.Server;

import components.CSVUtility;
import components.Commands.Command;
import components.IDGenerator;
import components.communication.Marshaller;
import components.communication.RPCMessage;
import components.messages.Message;
import components.texts.Status;

public class Communication {

	// Stores the response for further scrutiny by the client
	private RPCMessage response = null;

	/**
	 * Issue the command to the server. The response, if any,
	 * can be queried using other functions offered by this class.
	 * 
	 * @param command
	 *            The Command object corresponding to the operation.
	 * @param args
	 *            A list of arguments, if any, associated with the command.
	 * @return True if the operation executed successfully on the server.
	 */
	public boolean sendOperation(Command command, List<String> args) {
		// Construct an RPC Message request object
		RPCMessage request = new RPCMessage(RPCMessage.MessageType.REQUEST,
				IDGenerator.getNextInSequence("transaction"), IDGenerator.getNextInSequence("RPC"),
				IDGenerator.getNextInSequence("request"), command.getID(), CSVUtility.toCSV(args), Status.UNSET);

		// Call the corresponding remote functions
		if (command.equals(Command.Connect)) {
			// Connect to the server
			response = Server.getInstance().connect(request);

		} else if (command.equals(Command.Disconnect)) {
			// Disconnect from the server
			response = Server.getInstance().disconnect(request);

		} else if (command.equals(Command.Deposit)) {
			// Send the message
			response = Server.getInstance().deposit(request);

		} else if (command.equals(Command.Retrieve)) {
			// Get all messages
			response = Server.getInstance().retrieve(request);

		} else if (command.equals(Command.Inquire)) {
			// Check if a user is online
			response = Server.getInstance().inquire(request);
		}

		// Was the operation successful?
		return isOperationSuccessful();
	}

	// Check for a success status in the response
	private boolean isOperationSuccessful() {
		if (response != null)
			// Is the status a success notice?
			return response.getStatus() == Status.SUCCESS;
		else
			return false;
	}

	/**
	 * Returns the status of the operation.
	 * 
	 * @return The status as specified by the Status class.
	 */
	public short getStatus() {
		if (response != null)
			return response.getStatus();
		else
			return Status.UNSET;
	}

	/**
	 * Returns the client ID generated by the server.
	 * Note: Only use this when you are sure this is the result of the operation.
	 * 
	 * @return The ID for the client.
	 */
	public Long getClientID() {
		List<String> responseData = CSVUtility.fromCSV(response.getCsv_data());
		if (responseData != null)
			return Long.parseLong(responseData.get(0));
		else
			return IDGenerator.NULL_ID;
	}

	/**
	 * Returns a list of messages for the client retrieved from the server.
	 * Note: Only use this when you are sure this is the result of the operation.
	 * 
	 * @return A list of Message objects.
	 */
	@SuppressWarnings("unchecked")
	public List<Message> getChatMessages() {
		// Get the CSV data
		String responseData = response.getCsv_data();

		// TODO unmarshall
		Object unmarshalledData = Marshaller.unmarshall(responseData);
		if (unmarshalledData != null)
			return (List<Message>) unmarshalledData;
		else
			return null;
	}

	public boolean isUserOnline() {
		return Boolean.parseBoolean(response.getCsv_data());
	}
}
